/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui.competitor;
import admin.builder.actions.create.*;
import admin.builder.actions.read.*;
import admin.builder.actions.update.*;
import admin.builder.actions.delete.*;
import gui.BrowseDirectory;
import gui.DeleteWarning;
import gui.SMBSubmit;
import gui.SMBSubmit2;
import gui.SuccessMessage;
import gui.WarningMessage;
import gui.admin.*;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;

import jcifs.smb.SmbException;
import jcifs.smb.SmbFile;

/**
 *
 * @author jamin
 */
public class CompetitorPanel extends javax.swing.JFrame {
    
 //Run time variables
    public String selection; //new or edit
    SMBSubmit address = new SMBSubmit();
    SMBSubmit2 address2 = new SMBSubmit2();
    //Comp Lock
    public String compLoc;
    
    //Competition Panel
    public boolean newOpsVisible = true;
    public boolean loadOpsVisible = true;
    public boolean newOpsInputTxtTouched = false;
    public boolean newOpsInputTxt2Touched = false;
    public boolean loadOpsInputTxtTouched = false;
    public boolean smb = false;
    
    //Challenge Panel
    public boolean chalOpsVisible = false;
    public boolean searchChalVisible = false;
    
    public String editName;
    
    //Competitors Panel
    public boolean compOpsVisible = false;
    public boolean searchUsersVisible = false;
    public String editUser;
    
    /**
     * Creates new form GUI
     */
    public CompetitorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        scoreTableTab = new javax.swing.JTabbedPane();
        compTab = new javax.swing.JPanel();
        lCmpB = new javax.swing.JButton();
        loadOpsP = new javax.swing.JPanel();
        loadOpsBrowseB = new javax.swing.JButton();
        loadOpsInputTxt = new javax.swing.JTextField();
        loadOpsSubmitB = new javax.swing.JButton();
        loadInstructionsL = new javax.swing.JLabel();
        deleteComp = new javax.swing.JButton();
        newOpsRemoteB = new javax.swing.JButton();
        challengeTab = new javax.swing.JPanel();
        chalListSP = new javax.swing.JScrollPane();
        chalList = new javax.swing.JList();
        chalOpsP = new javax.swing.JPanel();
        searchChalP = new javax.swing.JPanel();
        searchChalSubmitB = new javax.swing.JButton();
        searchChalInputTxt = new javax.swing.JTextField();
        modChalListP = new javax.swing.JPanel();
        searchChalB = new javax.swing.JButton();
        searchChalResultsSP = new javax.swing.JScrollPane();
        searchChalResultsList = new javax.swing.JList();
        flagSubmitTxt = new javax.swing.JTextField();
        challengeSubmitL = new javax.swing.JLabel();
        flagL = new javax.swing.JLabel();
        userSubmitTxt = new javax.swing.JTextField();
        userL = new javax.swing.JLabel();
        loadOpsSubmitB1 = new javax.swing.JButton();
        scoreTab = new javax.swing.JPanel();
        scoreSP = new javax.swing.JScrollPane();
        scoreUpdaterThread();
        scoreTableList = new javax.swing.JList();
        competitorInstructions1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        MainPanel.setFont(new java.awt.Font("Courier 10 Pitch", 0, 15)); // NOI18N

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        scoreTableTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 35, 255)));
        scoreTableTab.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N

        lCmpB.setBackground(new java.awt.Color(0, 27, 255));
        lCmpB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        lCmpB.setForeground(new java.awt.Color(254, 254, 254));
        lCmpB.setText("Load Competition");
        lCmpB.setToolTipText("Load an old competition.");
        lCmpB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        lCmpB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lCmpBActionPerformed(evt);
            }
        });

        loadOpsP.setVisible(loadOpsVisible);
        loadOpsP.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        loadOpsBrowseB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        loadOpsBrowseB.setText("Browse");
        loadOpsBrowseB.setToolTipText("Browse for competition path");
        loadOpsBrowseB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadOpsBrowseBActionPerformed(evt);
            }
        });

        loadOpsInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        loadOpsInputTxt.setText("Competition Location");
        loadOpsInputTxt.setToolTipText("Path to folder or share the competition on.");
        loadOpsInputTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadOpsInputTxtMouseClicked(evt);
            }
        });

        loadOpsSubmitB.setBackground(new java.awt.Color(0, 0, 255));
        loadOpsSubmitB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        loadOpsSubmitB.setForeground(new java.awt.Color(254, 254, 254));
        loadOpsSubmitB.setText(">");
        loadOpsSubmitB.setToolTipText("Submit.");
        loadOpsSubmitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadOpsSubmitBActionPerformed(evt);
            }
        });

        loadInstructionsL.setBackground(new java.awt.Color(139, 124, 109));
        loadInstructionsL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 12)); // NOI18N
        loadInstructionsL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadInstructionsL.setText("Please provide full path to Competition.");

        deleteComp.setBackground(new java.awt.Color(1, 1, 1));
        deleteComp.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        deleteComp.setForeground(new java.awt.Color(255, 0, 0));
        deleteComp.setText("Delete");
        deleteComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCompActionPerformed(evt);
            }
        });

        newOpsRemoteB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        newOpsRemoteB.setText("Remote");
        newOpsRemoteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadOpsRemoteBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loadOpsPLayout = new javax.swing.GroupLayout(loadOpsP);
        loadOpsP.setLayout(loadOpsPLayout);
        loadOpsPLayout.setHorizontalGroup(
            loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadOpsPLayout.createSequentialGroup()
                .addGroup(loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loadOpsPLayout.createSequentialGroup()
                        .addComponent(loadOpsInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newOpsRemoteB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadOpsPLayout.createSequentialGroup()
                        .addComponent(deleteComp)
                        .addGap(62, 62, 62)
                        .addComponent(loadOpsBrowseB)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadOpsSubmitB, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(loadInstructionsL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        loadOpsPLayout.setVerticalGroup(
            loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadOpsPLayout.createSequentialGroup()
                .addGroup(loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadOpsInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newOpsRemoteB))
                .addGap(1, 1, 1)
                .addGroup(loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteComp)
                    .addComponent(loadOpsSubmitB)
                    .addComponent(loadOpsBrowseB))
                .addGap(0, 0, 0)
                .addComponent(loadInstructionsL, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout compTabLayout = new javax.swing.GroupLayout(compTab);
        compTab.setLayout(compTabLayout);
        compTabLayout.setHorizontalGroup(
            compTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compTabLayout.createSequentialGroup()
                .addGroup(compTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(compTabLayout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(loadOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(compTabLayout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(lCmpB, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        compTabLayout.setVerticalGroup(
            compTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compTabLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(lCmpB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        scoreTableTab.addTab("Competitions", compTab);

        chalList.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        chalList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<Loading Challenges>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        chalList.setToolTipText("Select the challenge you wish to edit.");
        chalList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                chalListValueChanged(evt);
            }
        });
        chalListSP.setViewportView(chalList);
        challengeCheckerThread();

        chalOpsP.setVisible(false);

        javax.swing.GroupLayout chalOpsPLayout = new javax.swing.GroupLayout(chalOpsP);
        chalOpsP.setLayout(chalOpsPLayout);
        chalOpsPLayout.setHorizontalGroup(
            chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        chalOpsPLayout.setVerticalGroup(
            chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        searchChalP.setVisible(searchChalVisible);

        searchChalSubmitB.setBackground(new java.awt.Color(255, 254, 0));
        searchChalSubmitB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchChalSubmitB.setForeground(new java.awt.Color(1, 1, 1));
        searchChalSubmitB.setText(">");
        searchChalSubmitB.setToolTipText("Submit.");
        searchChalSubmitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchChalSubmitBActionPerformed(evt);
            }
        });

        searchChalInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchChalInputTxt.setToolTipText("Search for challenge.");

        javax.swing.GroupLayout searchChalPLayout = new javax.swing.GroupLayout(searchChalP);
        searchChalP.setLayout(searchChalPLayout);
        searchChalPLayout.setHorizontalGroup(
            searchChalPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchChalPLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(searchChalInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchChalSubmitB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchChalPLayout.setVerticalGroup(
            searchChalPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchChalPLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(searchChalPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchChalSubmitB)
                    .addComponent(searchChalInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        modChalListP.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        searchChalB.setBackground(new java.awt.Color(253, 255, 0));
        searchChalB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchChalB.setForeground(new java.awt.Color(1, 1, 1));
        searchChalB.setText("Search");
        searchChalB.setToolTipText("Search for challenge.");
        searchChalB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        searchChalB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchChalBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modChalListPLayout = new javax.swing.GroupLayout(modChalListP);
        modChalListP.setLayout(modChalListPLayout);
        modChalListPLayout.setHorizontalGroup(
            modChalListPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modChalListPLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(searchChalB, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        modChalListPLayout.setVerticalGroup(
            modChalListPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modChalListPLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(searchChalB, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        searchChalResultsSP.setVisible(searchChalVisible);

        searchChalResultsList.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchChalResultsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<Search Results>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        searchChalResultsList.setToolTipText("Search results");
        searchChalResultsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                searchChalResultsListValueChanged(evt);
            }
        });
        searchChalResultsSP.setViewportView(searchChalResultsList);

        flagSubmitTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        flagSubmitTxt.setToolTipText("Path to folder or share the competition on.");
        flagSubmitTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flagSubmitTxtMouseClicked(evt);
            }
        });

        challengeSubmitL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        challengeSubmitL.setText("Challenge Submit: ");

        flagL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        flagL.setText("Flag:");

        userSubmitTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        userSubmitTxt.setToolTipText("Path to folder or share the competition on.");
        userSubmitTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userSubmitTxtMouseClicked(evt);
            }
        });

        userL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        userL.setText("User:");

        loadOpsSubmitB1.setBackground(new java.awt.Color(0, 255, 3));
        loadOpsSubmitB1.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        loadOpsSubmitB1.setForeground(new java.awt.Color(254, 254, 254));
        loadOpsSubmitB1.setText(">");
        loadOpsSubmitB1.setToolTipText("Submit.");
        loadOpsSubmitB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadOpsSubmitB1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout challengeTabLayout = new javax.swing.GroupLayout(challengeTab);
        challengeTab.setLayout(challengeTabLayout);
        challengeTabLayout.setHorizontalGroup(
            challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(challengeTabLayout.createSequentialGroup()
                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(challengeTabLayout.createSequentialGroup()
                        .addComponent(chalListSP, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchChalP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modChalListP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchChalResultsSP, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(challengeTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chalOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(challengeSubmitL)
                            .addGroup(challengeTabLayout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(flagL)
                                    .addComponent(userL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(flagSubmitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(challengeTabLayout.createSequentialGroup()
                                        .addComponent(userSubmitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(loadOpsSubmitB1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        challengeTabLayout.setVerticalGroup(
            challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(challengeTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(challengeTabLayout.createSequentialGroup()
                        .addComponent(modChalListP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchChalP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchChalResultsSP, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(chalListSP, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(challengeSubmitL)
                .addGap(18, 18, 18)
                .addComponent(chalOpsP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flagSubmitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flagL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userSubmitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadOpsSubmitB1)
                    .addComponent(userL))
                .addGap(40, 40, 40))
        );

        scoreTableTab.addTab("Challenges", challengeTab);

        scoreSP.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());

        scoreTableList.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        scoreTableList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<Loading Scores>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        scoreSP.setViewportView(scoreTableList);

        competitorInstructions1.setBackground(new java.awt.Color(139, 124, 109));
        competitorInstructions1.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        competitorInstructions1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        competitorInstructions1.setText("Competition Scores");

        javax.swing.GroupLayout scoreTabLayout = new javax.swing.GroupLayout(scoreTab);
        scoreTab.setLayout(scoreTabLayout);
        scoreTabLayout.setHorizontalGroup(
            scoreTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scoreSP)
            .addGroup(scoreTabLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(competitorInstructions1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        scoreTabLayout.setVerticalGroup(
            scoreTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreTabLayout.createSequentialGroup()
                .addComponent(competitorInstructions1)
                .addGap(8, 8, 8)
                .addComponent(scoreSP, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addContainerGap())
        );

        scoreTableTab.addTab("Score Table", scoreTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(scoreTableTab)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scoreTableTab))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchChalBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchChalBActionPerformed
        searchChalVisible = !searchChalVisible;
        searchChalP.setVisible(searchChalVisible);
        searchChalResultsSP.setVisible(searchChalVisible);
    }//GEN-LAST:event_searchChalBActionPerformed

    private void searchChalResultsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_searchChalResultsListValueChanged
        try {
            String name = searchChalResultsList.getSelectedValue().toString();
            editName = name;
            String flag = new ReadChallenges().GetFlag(searchChalResultsList.getSelectedValue().toString(), compLoc, smb);
            String description = new ReadChallenges().GetDescription(searchChalResultsList.getSelectedValue().toString(), compLoc, smb);
            String value = new ReadChallenges().GetValues(searchChalResultsList.getSelectedValue().toString(), compLoc, smb);
          challengeSubmitL.setText("Challenge Submit: " + name);
        } catch (IOException ex) {
            Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchChalResultsListValueChanged

    private void searchChalSubmitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchChalSubmitBActionPerformed
        String input = searchChalInputTxt.getText().trim();
        try {
            ArrayList<String> search = new ReadChallenges().Search(input, compLoc, smb);
            DefaultListModel newModel = new DefaultListModel();

            for(int i = 0; i < search.size(); i++){
                newModel.addElement(search.get(i));
            }
            searchChalResultsList.setModel(newModel);
        } catch (IOException ex) {
            Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchChalSubmitBActionPerformed

    private void chalListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_chalListValueChanged
        try {
            String name = chalList.getSelectedValue().toString();
            editName = name;
            challengeSubmitL.setText("Challenge Submit: " + name);
        } catch (Exception e) {
            Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_chalListValueChanged

    private void loadOpsRemoteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadOpsRemoteBActionPerformed
        loadOpsInputTxt.setText("<Using Remote Address>");
        address2.setVisible(true);
        smb = true;
    }//GEN-LAST:event_loadOpsRemoteBActionPerformed

    private void deleteCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCompActionPerformed
        boolean yesOrNo = new DeleteWarning().displayMessage("Are you sure you want to delete: " + loadOpsInputTxt.getText());
        if(yesOrNo){

            DeleteComp delete = new DeleteComp();
            boolean result = false;
            try {
                result = delete.delete(loadOpsInputTxt.getText(), smb);
                System.out.println(result);
            } catch (IOException ex) {
                Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(result)
            new SuccessMessage().displayMessage(loadOpsInputTxt.getText() + " successfully deleted" );
            else
            new WarningMessage().displayMessage(loadOpsInputTxt.getText() + " : No valid competition could be found at this location.");
        }
    }//GEN-LAST:event_deleteCompActionPerformed

    private void loadOpsSubmitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadOpsSubmitBActionPerformed
        try {
            //loadOpsInputTxt.setText(compLoc);
            if(smb){
                compLoc = "smb://" + address2.hostnameTxt.getText() + "/" + address2.hostnameTxt1.getText() + "/" + address2.hostnameTxt3.getText();
            }
            File file = new File(compLoc + "/Users.ctf");
            if(file.exists()){
                SuccessMessage success = new SuccessMessage();
                success.displayMessage("Successfully loaded competition at " + compLoc);
            }
            else if(new SmbFile(compLoc).exists()){
                SuccessMessage success = new SuccessMessage();
                success.displayMessage("Successfully loaded competition at " + compLoc);
            }
            else{
                new WarningMessage().displayMessage(loadOpsInputTxt.getText() + " : No valid competition could be found at this location.");
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SmbException ex) {
            Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadOpsSubmitBActionPerformed

    private void loadOpsInputTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadOpsInputTxtMouseClicked
        if(!loadOpsInputTxtTouched){
            loadOpsInputTxt.setText("");
            loadOpsInputTxtTouched = true;
        }
    }//GEN-LAST:event_loadOpsInputTxtMouseClicked

    private void loadOpsBrowseBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadOpsBrowseBActionPerformed
        BrowseDirectory directory = new BrowseDirectory();
        loadOpsInputTxt.setText(directory.browse() + "/");
        compLoc = loadOpsInputTxt.getText();
        smb = false;
    }//GEN-LAST:event_loadOpsBrowseBActionPerformed

    private void lCmpBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lCmpBActionPerformed
        loadOpsVisible = !loadOpsVisible;
        loadOpsP.setVisible(loadOpsVisible);
    }//GEN-LAST:event_lCmpBActionPerformed

    private void flagSubmitTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flagSubmitTxtMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_flagSubmitTxtMouseClicked

    private void userSubmitTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userSubmitTxtMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_userSubmitTxtMouseClicked

    private void loadOpsSubmitB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadOpsSubmitB1ActionPerformed
        String user = userSubmitTxt.getText();
        String flag = flagSubmitTxt.getText();
        try {
            if(new ReadUsers().checkExists(user, compLoc, smb)){
                if(flag.equals(new ReadChallenges().GetFlag(editName, compLoc, smb))){
                    System.out.print(new ReadUsers().GetCompletedChallenges(user, compLoc, smb));
                    if(!new ReadUsers().GetCompletedChallenges(user, compLoc, smb).contains(editName)){
                        new UpdateCompletedChallenge(user, editName).update(compLoc, smb);
                        new UpdateScore(user, Integer.parseInt(new ReadChallenges().GetValues(editName, compLoc, smb))).updateAdd(compLoc, smb);
                        
                        new SuccessMessage().displayMessage("Congratulations! This is the correct flag.");
                    }
                    else{
                        new WarningMessage().displayMessage(user + " has already submitted this challenge.");
                    }
                }
                else{
                    new WarningMessage().displayMessage("Sorry, this is the wrong flag!");
                }
            }
            else{
                new WarningMessage().displayMessage("User: " + user + "does not exist.");
            }
        } catch (IOException ex) {
            new WarningMessage().displayMessage("Please select a valid competition in the competition tab.");
        }
    }//GEN-LAST:event_loadOpsSubmitB1ActionPerformed

    
    
    public void challengeCheckerThread(){
          new Thread(new Runnable(){
            public void run() {
                    ArrayList<String> challenges = null;
                    String[] challengesArray = null;
                    while (true){
                        DefaultListModel nameListModel = new DefaultListModel();
                        if(compLoc != null){
                            try {
                                challenges = new ReadChallenges().FetchAllNames(compLoc, smb);
                            } catch (IOException ex) {
                                Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            for(int i = 0; i < challenges.size(); i++){
                                nameListModel.addElement(challenges.get(i));
                            }
                            try{
                                //nameListModel.setSize(WIDTH);
                                chalList.setModel(nameListModel);
                            }catch(NullPointerException e){
                                System.out.println("bad request.");
                            } 
                        }
                        
                        try {
                            Thread.sleep(4000);
                        } catch (InterruptedException ex ) {
                            Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
            }
        }).start();
    }
    
    
    
    public void scoreUpdaterThread(){
          new Thread(new Runnable(){
            public void run() {
                    ArrayList<String> users = null;
                    while (true){
                        DefaultListModel nameListModel = new DefaultListModel();
                        DefaultListModel scoreListModel = new DefaultListModel();
                        if(compLoc != null){
                            try {
                                users = new ReadUsers().FetchAllUsers(compLoc, smb);
                            } catch (IOException ex) {
                                Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            for(int i = 0; i < users.size(); i++){
                                try {
                                    scoreListModel.addElement(users.get(i) + " - " + new ReadUsers().GetScore(users.get(i), compLoc, smb));
                                } catch (IOException ex) {
                                    Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            try{
                                //nameListModel.setSize(WIDTH);
                                scoreTableList.setModel(scoreListModel);
                                
                            }catch(NullPointerException e){
                                System.out.println("bad request.");
                            }  
                            
                        }
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex ) {
                            Logger.getLogger(CompetitorPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
            }
        }).start();
    }
    
    private boolean isDigit(String string){
         boolean isDigit = true;
         String untestedValue = string;
           for(int i = 0; i < untestedValue.length(); i++){
               if(!Character.isDigit(untestedValue.charAt(i))){
                   isDigit = false;
               }
           }
           return isDigit;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompetitorPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompetitorPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompetitorPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompetitorPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompetitorPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainPanel;
    private javax.swing.JList chalList;
    private javax.swing.JScrollPane chalListSP;
    private javax.swing.JPanel chalOpsP;
    private javax.swing.JLabel challengeSubmitL;
    private javax.swing.JPanel challengeTab;
    private javax.swing.JPanel compTab;
    private javax.swing.JLabel competitorInstructions1;
    private javax.swing.JButton deleteComp;
    private javax.swing.JLabel flagL;
    private javax.swing.JTextField flagSubmitTxt;
    private javax.swing.JButton lCmpB;
    private javax.swing.JLabel loadInstructionsL;
    private javax.swing.JButton loadOpsBrowseB;
    private javax.swing.JTextField loadOpsInputTxt;
    private javax.swing.JPanel loadOpsP;
    private javax.swing.JButton loadOpsSubmitB;
    private javax.swing.JButton loadOpsSubmitB1;
    private javax.swing.JPanel modChalListP;
    private javax.swing.JButton newOpsRemoteB;
    private javax.swing.JScrollPane scoreSP;
    private javax.swing.JPanel scoreTab;
    private javax.swing.JList scoreTableList;
    private javax.swing.JTabbedPane scoreTableTab;
    private javax.swing.JButton searchChalB;
    private javax.swing.JTextField searchChalInputTxt;
    private javax.swing.JPanel searchChalP;
    private javax.swing.JList searchChalResultsList;
    private javax.swing.JScrollPane searchChalResultsSP;
    private javax.swing.JButton searchChalSubmitB;
    private javax.swing.JLabel userL;
    private javax.swing.JTextField userSubmitTxt;
    // End of variables declaration//GEN-END:variables
}
