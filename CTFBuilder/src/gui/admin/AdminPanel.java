/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui.admin;
import admin.builder.actions.create.*;
import admin.builder.actions.read.*;
import admin.builder.actions.update.*;
import admin.builder.actions.delete.*;
import gui.BrowseDirectory;
import gui.DeleteWarning;
import gui.SMBSubmit;
import gui.SMBSubmit2;
import gui.SuccessMessage;
import gui.WarningMessage;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;

import jcifs.smb.SmbException;
import jcifs.smb.SmbFile;

/**
 *
 * @author jamin
 */
public class AdminPanel extends javax.swing.JFrame {
    
 //Run time variables
    public String selection; //new or edit
    SMBSubmit address = new SMBSubmit();
    SMBSubmit2 address2 = new SMBSubmit2();
    //Comp Lock
    public String compLoc;
    
    //Competition Panel
    public boolean newOpsVisible = true;
    public boolean loadOpsVisible = false;
    public boolean newOpsInputTxtTouched = false;
    public boolean newOpsInputTxt2Touched = false;
    public boolean loadOpsInputTxtTouched = false;
    public boolean smb = false;
    
    //Challenge Panel
    public boolean chalOpsVisible = false;
    public boolean searchChalVisible = false;
    
    public String editName;
    
    //Competitors Panel
    public boolean compOpsVisible = false;
    public boolean searchUsersVisible = false;
    public String editUser;
    
    /**
     * Creates new form GUI
     */
    public AdminPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        scoreTableTab = new javax.swing.JTabbedPane();
        compTab = new javax.swing.JPanel();
        compInstructionsL = new javax.swing.JLabel();
        nCmpB = new javax.swing.JButton();
        lCmpB = new javax.swing.JButton();
        loadOpsP = new javax.swing.JPanel();
        loadOpsBrowseB = new javax.swing.JButton();
        loadOpsInputTxt = new javax.swing.JTextField();
        loadOpsSubmitB = new javax.swing.JButton();
        loadInstructionsL = new javax.swing.JLabel();
        deleteComp = new javax.swing.JButton();
        newOpsRemoteB = new javax.swing.JButton();
        newOpsP = new javax.swing.JPanel();
        newOpsBrowseB = new javax.swing.JButton();
        newOpsInputTxt = new javax.swing.JTextField();
        newOpsSubmitB = new javax.swing.JButton();
        newInstructionsL = new javax.swing.JLabel();
        newOpsInputTxt2 = new javax.swing.JTextField();
        newOpsRemoteB1 = new javax.swing.JButton();
        challengeTab = new javax.swing.JPanel();
        chalListSP = new javax.swing.JScrollPane();
        chalList = new javax.swing.JList();
        eChalB = new javax.swing.JButton();
        nChalB = new javax.swing.JButton();
        chalOpsP = new javax.swing.JPanel();
        chalNameInputTxt = new javax.swing.JTextField();
        challengeNameL = new javax.swing.JLabel();
        chalFlagInputTxt = new javax.swing.JTextField();
        challengeFlagL = new javax.swing.JLabel();
        challengeValue = new javax.swing.JLabel();
        chalValueInputTxt = new javax.swing.JTextField();
        challengeDescrpL = new javax.swing.JLabel();
        chalDescrpInputTxt = new javax.swing.JTextField();
        chalOpsSubmitB = new javax.swing.JButton();
        chalInstructionsL = new javax.swing.JLabel();
        currentChallengesL = new javax.swing.JLabel();
        searchChalP = new javax.swing.JPanel();
        searchChalSubmitB = new javax.swing.JButton();
        searchChalInputTxt = new javax.swing.JTextField();
        searchChalResultsSP = new javax.swing.JScrollPane();
        searchChalResultsList = new javax.swing.JList();
        modChalListP = new javax.swing.JPanel();
        deleteChal = new javax.swing.JButton();
        searchChalB = new javax.swing.JButton();
        competitorsTab = new javax.swing.JPanel();
        nCompB = new javax.swing.JButton();
        eCompB = new javax.swing.JButton();
        competitorInstructions = new javax.swing.JLabel();
        compOpsP = new javax.swing.JPanel();
        compNameTxt = new javax.swing.JTextField();
        compNameLabel = new javax.swing.JLabel();
        compOpsSubmitB = new javax.swing.JButton();
        compScoreTxt = new javax.swing.JTextField();
        compScoreL = new javax.swing.JLabel();
        currentUsersL = new javax.swing.JLabel();
        searchUsersP = new javax.swing.JPanel();
        searchUserSubmitB = new javax.swing.JButton();
        searchUserInputTxt = new javax.swing.JTextField();
        searchUsersResultsSP = new javax.swing.JScrollPane();
        searchUsersResultsList = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        modUserListP = new javax.swing.JPanel();
        deleteUserB = new javax.swing.JButton();
        searchUserB = new javax.swing.JButton();
        scoreTab = new javax.swing.JPanel();
        scoreSP = new javax.swing.JScrollPane();
        scoreUpdaterThread();
        scoreTableList = new javax.swing.JList();
        competitorInstructions1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        MainPanel.setFont(new java.awt.Font("Courier 10 Pitch", 0, 15)); // NOI18N

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        scoreTableTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 35, 255)));
        scoreTableTab.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N

        compInstructionsL.setBackground(new java.awt.Color(139, 124, 109));
        compInstructionsL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        compInstructionsL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        compInstructionsL.setText("Create a new competition or load an old one.");

        nCmpB.setBackground(new java.awt.Color(0, 247, 11));
        nCmpB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        nCmpB.setText("New Competition");
        nCmpB.setToolTipText("Build a new competition.");
        nCmpB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        nCmpB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nCmpBActionPerformed(evt);
            }
        });

        lCmpB.setBackground(new java.awt.Color(0, 27, 255));
        lCmpB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        lCmpB.setForeground(new java.awt.Color(254, 254, 254));
        lCmpB.setText("Load Competition");
        lCmpB.setToolTipText("Load an old competition.");
        lCmpB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        lCmpB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lCmpBActionPerformed(evt);
            }
        });

        loadOpsP.setVisible(loadOpsVisible);
        loadOpsP.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        loadOpsBrowseB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        loadOpsBrowseB.setText("Browse");
        loadOpsBrowseB.setToolTipText("Browse for competition path");
        loadOpsBrowseB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadOpsBrowseBActionPerformed(evt);
            }
        });

        loadOpsInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        loadOpsInputTxt.setText("Competition Location");
        loadOpsInputTxt.setToolTipText("Path to folder or share the competition on.");
        loadOpsInputTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadOpsInputTxtMouseClicked(evt);
            }
        });

        loadOpsSubmitB.setBackground(new java.awt.Color(0, 0, 255));
        loadOpsSubmitB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        loadOpsSubmitB.setForeground(new java.awt.Color(254, 254, 254));
        loadOpsSubmitB.setText(">");
        loadOpsSubmitB.setToolTipText("Submit.");
        loadOpsSubmitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadOpsSubmitBActionPerformed(evt);
            }
        });

        loadInstructionsL.setBackground(new java.awt.Color(139, 124, 109));
        loadInstructionsL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 12)); // NOI18N
        loadInstructionsL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadInstructionsL.setText("Please provide full path to Competition.");

        deleteComp.setBackground(new java.awt.Color(1, 1, 1));
        deleteComp.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        deleteComp.setForeground(new java.awt.Color(255, 0, 0));
        deleteComp.setText("Delete");
        deleteComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCompActionPerformed(evt);
            }
        });

        newOpsRemoteB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        newOpsRemoteB.setText("Remote");
        newOpsRemoteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadOpsRemoteBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loadOpsPLayout = new javax.swing.GroupLayout(loadOpsP);
        loadOpsP.setLayout(loadOpsPLayout);
        loadOpsPLayout.setHorizontalGroup(
            loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadOpsPLayout.createSequentialGroup()
                .addGroup(loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loadOpsPLayout.createSequentialGroup()
                        .addComponent(loadOpsInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newOpsRemoteB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadOpsPLayout.createSequentialGroup()
                        .addComponent(deleteComp)
                        .addGap(62, 62, 62)
                        .addComponent(loadOpsBrowseB)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadOpsSubmitB, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(loadInstructionsL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        loadOpsPLayout.setVerticalGroup(
            loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadOpsPLayout.createSequentialGroup()
                .addGroup(loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadOpsInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newOpsRemoteB))
                .addGap(1, 1, 1)
                .addGroup(loadOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteComp)
                    .addComponent(loadOpsSubmitB)
                    .addComponent(loadOpsBrowseB))
                .addGap(0, 0, 0)
                .addComponent(loadInstructionsL, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        loadOpsP.setVisible(loadOpsVisible);
        newOpsP.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        newOpsBrowseB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        newOpsBrowseB.setText("Browse");
        newOpsBrowseB.setToolTipText("Browse for competition path");
        newOpsBrowseB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOpsBrowseBActionPerformed(evt);
            }
        });

        newOpsInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        newOpsInputTxt.setText("Competition Name");
        newOpsInputTxt.setToolTipText("Path to file or share the competition on.");
        newOpsInputTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newOpsInputTxtMouseClicked(evt);
            }
        });

        newOpsSubmitB.setBackground(new java.awt.Color(1, 255, 0));
        newOpsSubmitB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        newOpsSubmitB.setForeground(new java.awt.Color(1, 1, 1));
        newOpsSubmitB.setText(">");
        newOpsSubmitB.setToolTipText("Submit.");
        newOpsSubmitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOpsSubmitBActionPerformed(evt);
            }
        });

        newInstructionsL.setBackground(new java.awt.Color(139, 124, 109));
        newInstructionsL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 12)); // NOI18N
        newInstructionsL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newInstructionsL.setText("Create a new competition and decide where to put it.");

        newOpsInputTxt2.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        newOpsInputTxt2.setText("Read/Writable Location to store");
        newOpsInputTxt2.setToolTipText("Path to file or share the competition on.");
        newOpsInputTxt2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newOpsInputTxt2MouseClicked(evt);
            }
        });

        newOpsRemoteB1.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        newOpsRemoteB1.setText("Remote");
        newOpsRemoteB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOpsRemoteB1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newOpsPLayout = new javax.swing.GroupLayout(newOpsP);
        newOpsP.setLayout(newOpsPLayout);
        newOpsPLayout.setHorizontalGroup(
            newOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newInstructionsL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(newOpsPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newOpsPLayout.createSequentialGroup()
                        .addComponent(newOpsInputTxt2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newOpsBrowseB))
                    .addGroup(newOpsPLayout.createSequentialGroup()
                        .addComponent(newOpsInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newOpsRemoteB1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newOpsSubmitB, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );
        newOpsPLayout.setVerticalGroup(
            newOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newOpsPLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(newOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newOpsInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newOpsRemoteB1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(newOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newOpsBrowseB)
                    .addComponent(newOpsSubmitB)
                    .addComponent(newOpsInputTxt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(newInstructionsL, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout compTabLayout = new javax.swing.GroupLayout(compTab);
        compTab.setLayout(compTabLayout);
        compTabLayout.setHorizontalGroup(
            compTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compTabLayout.createSequentialGroup()
                .addGroup(compTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(compTabLayout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(nCmpB, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(compTabLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(compInstructionsL, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(compTabLayout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(lCmpB, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(compTabLayout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addGroup(compTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loadOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        compTabLayout.setVerticalGroup(
            compTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compTabLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(compInstructionsL)
                .addGap(42, 42, 42)
                .addComponent(nCmpB)
                .addGap(18, 18, 18)
                .addComponent(newOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lCmpB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        scoreTableTab.addTab("Competitions", compTab);

        chalList.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        chalList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<Loading Challenges>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        chalList.setToolTipText("Select the challenge you wish to edit.");
        chalList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                chalListValueChanged(evt);
            }
        });
        chalListSP.setViewportView(chalList);
        challengeCheckerThread();

        eChalB.setBackground(new java.awt.Color(0, 27, 255));
        eChalB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        eChalB.setForeground(new java.awt.Color(254, 254, 254));
        eChalB.setText("Edit Challenge");
        eChalB.setToolTipText("Edit an old challenge");
        eChalB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        eChalB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eChalBActionPerformed(evt);
            }
        });

        nChalB.setBackground(new java.awt.Color(0, 247, 11));
        nChalB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        nChalB.setText("New Challenge");
        nChalB.setToolTipText("Create a new challenge.");
        nChalB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        nChalB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nChalBActionPerformed(evt);
            }
        });

        chalOpsP.setVisible(false);

        chalNameInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        chalNameInputTxt.setToolTipText("Name of challenge");

        challengeNameL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        challengeNameL.setText("Name:");

        chalFlagInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        chalFlagInputTxt.setToolTipText("Flag of challenge");

        challengeFlagL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        challengeFlagL.setText("Flag:");

        challengeValue.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        challengeValue.setText("Value:");

        chalValueInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        chalValueInputTxt.setToolTipText("Value of challenge");

        challengeDescrpL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        challengeDescrpL.setText("Description:");

        chalDescrpInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        chalDescrpInputTxt.setToolTipText("Description of challenge");

        chalOpsSubmitB.setBackground(new java.awt.Color(1, 1, 1));
        chalOpsSubmitB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        chalOpsSubmitB.setForeground(new java.awt.Color(254, 254, 254));
        chalOpsSubmitB.setText(">");
        chalOpsSubmitB.setToolTipText("Submit.");
        chalOpsSubmitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chalOpsSubmitBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chalOpsPLayout = new javax.swing.GroupLayout(chalOpsP);
        chalOpsP.setLayout(chalOpsPLayout);
        chalOpsPLayout.setHorizontalGroup(
            chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chalOpsPLayout.createSequentialGroup()
                .addComponent(chalDescrpInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chalOpsSubmitB)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(chalOpsPLayout.createSequentialGroup()
                .addGroup(chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(chalOpsPLayout.createSequentialGroup()
                        .addGroup(chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(challengeFlagL)
                            .addComponent(challengeValue)
                            .addComponent(challengeNameL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chalNameInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chalValueInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chalFlagInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(challengeDescrpL))
                .addContainerGap(168, Short.MAX_VALUE))
        );
        chalOpsPLayout.setVerticalGroup(
            chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chalOpsPLayout.createSequentialGroup()
                .addGroup(chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(challengeNameL)
                    .addComponent(chalNameInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(challengeFlagL)
                    .addComponent(chalFlagInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chalValueInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(challengeValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(challengeDescrpL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chalOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chalDescrpInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chalOpsSubmitB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chalInstructionsL.setBackground(new java.awt.Color(139, 124, 109));
        chalInstructionsL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        chalInstructionsL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chalInstructionsL.setText("Create a new challenge or edit an old one.");

        currentChallengesL.setBackground(new java.awt.Color(139, 124, 109));
        currentChallengesL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        currentChallengesL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentChallengesL.setText("Current Challenges");

        searchChalP.setVisible(searchChalVisible);

        searchChalSubmitB.setBackground(new java.awt.Color(255, 254, 0));
        searchChalSubmitB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchChalSubmitB.setForeground(new java.awt.Color(1, 1, 1));
        searchChalSubmitB.setText(">");
        searchChalSubmitB.setToolTipText("Submit.");
        searchChalSubmitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchChalSubmitBActionPerformed(evt);
            }
        });

        searchChalInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchChalInputTxt.setToolTipText("Search for challenge.");

        javax.swing.GroupLayout searchChalPLayout = new javax.swing.GroupLayout(searchChalP);
        searchChalP.setLayout(searchChalPLayout);
        searchChalPLayout.setHorizontalGroup(
            searchChalPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchChalPLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(searchChalInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchChalSubmitB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchChalPLayout.setVerticalGroup(
            searchChalPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchChalPLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(searchChalPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchChalSubmitB)
                    .addComponent(searchChalInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        searchChalResultsSP.setVisible(searchChalVisible);

        searchChalResultsList.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchChalResultsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<Search Results>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        searchChalResultsList.setToolTipText("Search results");
        searchChalResultsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                searchChalResultsListValueChanged(evt);
            }
        });
        searchChalResultsSP.setViewportView(searchChalResultsList);

        modChalListP.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        deleteChal.setBackground(new java.awt.Color(1, 1, 1));
        deleteChal.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        deleteChal.setForeground(new java.awt.Color(255, 0, 0));
        deleteChal.setText("Delete");
        deleteChal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteChalActionPerformed(evt);
            }
        });

        searchChalB.setBackground(new java.awt.Color(253, 255, 0));
        searchChalB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchChalB.setForeground(new java.awt.Color(1, 1, 1));
        searchChalB.setText("Search");
        searchChalB.setToolTipText("Search for challenge.");
        searchChalB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        searchChalB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchChalBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modChalListPLayout = new javax.swing.GroupLayout(modChalListP);
        modChalListP.setLayout(modChalListPLayout);
        modChalListPLayout.setHorizontalGroup(
            modChalListPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modChalListPLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(modChalListPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(deleteChal, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(searchChalB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        modChalListPLayout.setVerticalGroup(
            modChalListPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modChalListPLayout.createSequentialGroup()
                .addComponent(deleteChal, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchChalB, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout challengeTabLayout = new javax.swing.GroupLayout(challengeTab);
        challengeTab.setLayout(challengeTabLayout);
        challengeTabLayout.setHorizontalGroup(
            challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(challengeTabLayout.createSequentialGroup()
                .addGap(84, 99, Short.MAX_VALUE)
                .addComponent(chalInstructionsL, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(103, 103, 103))
            .addGroup(challengeTabLayout.createSequentialGroup()
                .addComponent(nChalB, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(challengeTabLayout.createSequentialGroup()
                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eChalB, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(challengeTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chalOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(currentChallengesL, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(challengeTabLayout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(modChalListP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchChalResultsSP, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchChalP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(challengeTabLayout.createSequentialGroup()
                        .addComponent(chalListSP, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addGap(10, 10, 10))
        );
        challengeTabLayout.setVerticalGroup(
            challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(challengeTabLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(chalInstructionsL)
                .addGap(12, 12, 12)
                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nChalB)
                    .addComponent(currentChallengesL, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(challengeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(challengeTabLayout.createSequentialGroup()
                        .addComponent(chalListSP, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modChalListP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchChalP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchChalResultsSP, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 32, Short.MAX_VALUE))
                    .addGroup(challengeTabLayout.createSequentialGroup()
                        .addComponent(eChalB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chalOpsP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        scoreTableTab.addTab("Challenges", challengeTab);

        nCompB.setBackground(new java.awt.Color(0, 247, 11));
        nCompB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        nCompB.setText("New Competitor");
        nCompB.setToolTipText("Add a new competitor.");
        nCompB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        nCompB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nCompBActionPerformed(evt);
            }
        });

        eCompB.setBackground(new java.awt.Color(0, 27, 255));
        eCompB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        eCompB.setForeground(new java.awt.Color(254, 254, 254));
        eCompB.setText("Edit Competitor");
        eCompB.setToolTipText("Edit an old competitor.");
        eCompB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        eCompB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eCompBActionPerformed(evt);
            }
        });

        competitorInstructions.setBackground(new java.awt.Color(139, 124, 109));
        competitorInstructions.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        competitorInstructions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        competitorInstructions.setText("Add a new competitor or edit an old one.");

        compOpsP.setVisible(false);

        compNameTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        compNameTxt.setToolTipText("Name of competitor");

        compNameLabel.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        compNameLabel.setText("Name:");

        compOpsSubmitB.setBackground(new java.awt.Color(1, 1, 1));
        compOpsSubmitB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        compOpsSubmitB.setForeground(new java.awt.Color(254, 254, 254));
        compOpsSubmitB.setText(">");
        compOpsSubmitB.setToolTipText("Submit.");
        compOpsSubmitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compOpsSubmitBActionPerformed(evt);
            }
        });

        compScoreTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        compScoreTxt.setToolTipText("Score of competitor");

        compScoreL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        compScoreL.setText("Score:");

        javax.swing.GroupLayout compOpsPLayout = new javax.swing.GroupLayout(compOpsP);
        compOpsP.setLayout(compOpsPLayout);
        compOpsPLayout.setHorizontalGroup(
            compOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compOpsPLayout.createSequentialGroup()
                .addGroup(compOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(compOpsPLayout.createSequentialGroup()
                        .addComponent(compScoreL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(compScoreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(compOpsPLayout.createSequentialGroup()
                        .addComponent(compNameLabel)
                        .addGap(21, 21, 21)
                        .addComponent(compNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compOpsSubmitB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        compOpsPLayout.setVerticalGroup(
            compOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compOpsPLayout.createSequentialGroup()
                .addGroup(compOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compNameLabel)
                    .addComponent(compNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(compOpsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compScoreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compOpsSubmitB)
                    .addComponent(compScoreL))
                .addContainerGap(151, Short.MAX_VALUE))
        );

        currentUsersL.setBackground(new java.awt.Color(139, 124, 109));
        currentUsersL.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        currentUsersL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentUsersL.setText("Current Competitors");

        searchUsersP.setVisible(searchUsersVisible);

        searchUserSubmitB.setBackground(new java.awt.Color(255, 254, 0));
        searchUserSubmitB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchUserSubmitB.setForeground(new java.awt.Color(1, 1, 1));
        searchUserSubmitB.setText(">");
        searchUserSubmitB.setToolTipText("Submit.");
        searchUserSubmitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserSubmitBActionPerformed(evt);
            }
        });

        searchUserInputTxt.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchUserInputTxt.setToolTipText("Competitor to search");

        javax.swing.GroupLayout searchUsersPLayout = new javax.swing.GroupLayout(searchUsersP);
        searchUsersP.setLayout(searchUsersPLayout);
        searchUsersPLayout.setHorizontalGroup(
            searchUsersPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchUsersPLayout.createSequentialGroup()
                .addComponent(searchUserInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchUserSubmitB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );
        searchUsersPLayout.setVerticalGroup(
            searchUsersPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchUsersPLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(searchUsersPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchUserSubmitB)
                    .addComponent(searchUserInputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        searchUsersResultsSP.setVisible(searchUsersVisible);

        searchUsersResultsList.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchUsersResultsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<Search Results>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        searchUsersResultsList.setToolTipText("Search results");
        searchUsersResultsSP.setViewportView(searchUsersResultsList);

        userList.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        userList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<Loading Competitors>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        userList.setToolTipText("Select the competitor you wish to edit.");
        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(userList);
        userCheckerThread();

        modUserListP.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        deleteUserB.setBackground(new java.awt.Color(1, 1, 1));
        deleteUserB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        deleteUserB.setForeground(new java.awt.Color(255, 0, 0));
        deleteUserB.setText("Delete");
        deleteUserB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserBActionPerformed(evt);
            }
        });

        searchUserB.setBackground(new java.awt.Color(253, 255, 0));
        searchUserB.setFont(new java.awt.Font("Courier 10 Pitch", 1, 14)); // NOI18N
        searchUserB.setForeground(new java.awt.Color(1, 1, 1));
        searchUserB.setText("Search");
        searchUserB.setToolTipText("Search for challenge.");
        searchUserB.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        searchUserB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modUserListPLayout = new javax.swing.GroupLayout(modUserListP);
        modUserListP.setLayout(modUserListPLayout);
        modUserListPLayout.setHorizontalGroup(
            modUserListPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modUserListPLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(modUserListPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(deleteUserB, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(searchUserB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        modUserListPLayout.setVerticalGroup(
            modUserListPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modUserListPLayout.createSequentialGroup()
                .addComponent(deleteUserB, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchUserB, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout competitorsTabLayout = new javax.swing.GroupLayout(competitorsTab);
        competitorsTab.setLayout(competitorsTabLayout);
        competitorsTabLayout.setHorizontalGroup(
            competitorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, competitorsTabLayout.createSequentialGroup()
                .addGap(0, 104, Short.MAX_VALUE)
                .addComponent(competitorInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, competitorsTabLayout.createSequentialGroup()
                .addGroup(competitorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eCompB, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nCompB, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(competitorsTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(compOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(competitorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentUsersL, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(competitorsTabLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(competitorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modUserListP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchUsersP, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchUsersResultsSP, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );
        competitorsTabLayout.setVerticalGroup(
            competitorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(competitorsTabLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(competitorInstructions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(competitorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nCompB)
                    .addComponent(currentUsersL, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(competitorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(competitorsTabLayout.createSequentialGroup()
                        .addComponent(eCompB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(compOpsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(competitorsTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modUserListP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchUsersP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchUsersResultsSP, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
        );

        scoreTableTab.addTab("Competitors", competitorsTab);

        scoreSP.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());

        scoreTableList.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        scoreTableList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<Loading Scores>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        scoreSP.setViewportView(scoreTableList);

        competitorInstructions1.setBackground(new java.awt.Color(139, 124, 109));
        competitorInstructions1.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        competitorInstructions1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        competitorInstructions1.setText("Competition Scores");

        javax.swing.GroupLayout scoreTabLayout = new javax.swing.GroupLayout(scoreTab);
        scoreTab.setLayout(scoreTabLayout);
        scoreTabLayout.setHorizontalGroup(
            scoreTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scoreSP)
            .addGroup(scoreTabLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(competitorInstructions1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(108, Short.MAX_VALUE))
        );
        scoreTabLayout.setVerticalGroup(
            scoreTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreTabLayout.createSequentialGroup()
                .addComponent(competitorInstructions1)
                .addGap(8, 8, 8)
                .addComponent(scoreSP, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                .addContainerGap())
        );

        scoreTableTab.addTab("Score Table", scoreTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(scoreTableTab)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scoreTableTab, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void userCheckerThread(){
          new Thread(new Runnable(){
            public void run() {
                    ArrayList<String> challenges = null;
                    String[] challengesArray = null;
                    while (true){
                        DefaultListModel nameListModel = new DefaultListModel();
                        if(compLoc != null){
                            try {
                                challenges = new ReadUsers().FetchAllUsers(compLoc, smb);
                            } catch (IOException ex) {
                                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            for(int i = 0; i < challenges.size(); i++){
                                nameListModel.addElement(challenges.get(i));
                            }
                            try{
                                //nameListModel.setSize(WIDTH);
                                userList.setModel(nameListModel);
                                
                            }catch(NullPointerException e){
                                System.out.println("bad request.");
                            }  
                            
                        }
                        try {
                            Thread.sleep(4000);
                        } catch (InterruptedException ex ) {
                            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
            }
        }).start();
    }
    
    public void challengeCheckerThread(){
          new Thread(new Runnable(){
            public void run() {
                    ArrayList<String> challenges = null;
                    String[] challengesArray = null;
                    while (true){
                        DefaultListModel nameListModel = new DefaultListModel();
                        if(compLoc != null){
                            try {
                                challenges = new ReadChallenges().FetchAllNames(compLoc, smb);
                            } catch (IOException ex) {
                                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            for(int i = 0; i < challenges.size(); i++){
                                nameListModel.addElement(challenges.get(i));
                            }
                            try{
                                //nameListModel.setSize(WIDTH);
                                chalList.setModel(nameListModel);
                            }catch(NullPointerException e){
                                System.out.println("bad request.");
                            } 
                        }
                        
                        try {
                            Thread.sleep(4000);
                        } catch (InterruptedException ex ) {
                            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
            }
        }).start();
    }
    
    
    
    public void scoreUpdaterThread(){
          new Thread(new Runnable(){
            public void run() {
                    ArrayList<String> users = null;
                    while (true){
                        DefaultListModel nameListModel = new DefaultListModel();
                        DefaultListModel scoreListModel = new DefaultListModel();
                        if(compLoc != null){
                            try {
                                users = new ReadUsers().FetchAllUsers(compLoc, smb);
                            } catch (IOException ex) {
                                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            for(int i = 0; i < users.size(); i++){
                                try {
                                    scoreListModel.addElement(users.get(i) + " - " + new ReadUsers().GetScore(users.get(i), compLoc, smb));
                                } catch (IOException ex) {
                                    Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            try{
                                //nameListModel.setSize(WIDTH);
                                scoreTableList.setModel(scoreListModel);
                                
                            }catch(NullPointerException e){
                                System.out.println("bad request.");
                            }  
                            
                        }
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex ) {
                            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
            }
        }).start();
    }
    
    private void nCmpBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nCmpBActionPerformed
        newOpsVisible = !newOpsVisible;
        newOpsP.setVisible(newOpsVisible);
        loadOpsP.setVisible(false);
       
    }//GEN-LAST:event_nCmpBActionPerformed

    private void lCmpBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lCmpBActionPerformed
        loadOpsVisible = !loadOpsVisible;
        loadOpsP.setVisible(loadOpsVisible);
        newOpsP.setVisible(false);
    }//GEN-LAST:event_lCmpBActionPerformed

    private void newOpsInputTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newOpsInputTxtMouseClicked
        if(!newOpsInputTxtTouched){
            newOpsInputTxt.setText("");
            newOpsInputTxtTouched = true;
        }
    }//GEN-LAST:event_newOpsInputTxtMouseClicked

    private void newOpsInputTxt2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newOpsInputTxt2MouseClicked
        if(!newOpsInputTxt2Touched){
            newOpsInputTxt2.setText("");
            newOpsInputTxt2Touched = true;
        }
    }//GEN-LAST:event_newOpsInputTxt2MouseClicked

    private void loadOpsInputTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadOpsInputTxtMouseClicked
       if(!loadOpsInputTxtTouched){
            loadOpsInputTxt.setText("");
            loadOpsInputTxtTouched = true;
        }
    }//GEN-LAST:event_loadOpsInputTxtMouseClicked

    private void eChalBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eChalBActionPerformed
        selection = "edit";
        chalOpsVisible = !chalOpsVisible;
        chalOpsP.setVisible(chalOpsVisible);
        chalOpsSubmitB.setForeground(Color.WHITE);
        chalOpsSubmitB.setBackground(Color.BLUE);
    }//GEN-LAST:event_eChalBActionPerformed

    private void nChalBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nChalBActionPerformed
        selection = "new";
        chalOpsVisible = !chalOpsVisible;
        chalOpsP.setVisible(chalOpsVisible);
        chalOpsSubmitB.setForeground(Color.BLACK);
        chalOpsSubmitB.setBackground(Color.GREEN);
        
    }//GEN-LAST:event_nChalBActionPerformed

    private void searchChalBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchChalBActionPerformed
        searchChalVisible = !searchChalVisible;
        searchChalP.setVisible(searchChalVisible);
        searchChalResultsSP.setVisible(searchChalVisible);
       
    }//GEN-LAST:event_searchChalBActionPerformed

    private void searchChalSubmitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchChalSubmitBActionPerformed
        String input = searchChalInputTxt.getText().trim();
        try {
            ArrayList<String> search = new ReadChallenges().Search(input, compLoc, smb);
            DefaultListModel newModel = new DefaultListModel();
            
            for(int i = 0; i < search.size(); i++){
                newModel.addElement(search.get(i));
            }
            searchChalResultsList.setModel(newModel);
        } catch (IOException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchChalSubmitBActionPerformed

    private void searchUserSubmitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserSubmitBActionPerformed
        String input = searchUserInputTxt.getText().trim();
        System.out.println(input);
        try {
            ArrayList<String> search = new ReadUsers().Search(input, compLoc, smb);
            DefaultListModel newModel = new DefaultListModel();
            
            for(int i = 0; i < search.size(); i++){
                newModel.addElement(search.get(i));
            }
            searchUsersResultsList.setModel(newModel);
        } catch (IOException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchUserSubmitBActionPerformed

    private void eCompBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eCompBActionPerformed
        compOpsVisible = !compOpsVisible;
        compOpsP.setVisible(compOpsVisible);
        compOpsSubmitB.setForeground(Color.WHITE);
        compOpsSubmitB.setBackground(Color.BLUE);
        selection = "edit";
    }//GEN-LAST:event_eCompBActionPerformed

    private void nCompBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nCompBActionPerformed
        compOpsVisible = !compOpsVisible;
        compOpsP.setVisible(compOpsVisible);
        compOpsSubmitB.setForeground(Color.BLACK);
        compOpsSubmitB.setBackground(Color.GREEN);
        selection = "new";
    }//GEN-LAST:event_nCompBActionPerformed

    private void newOpsSubmitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOpsSubmitBActionPerformed
        String compName;
        String directoryOfCreation;
        compName = newOpsInputTxt.getText(); //Name
        System.out.println(smb);
        if(!smb){
            
            directoryOfCreation = newOpsInputTxt2.getText(); //Directory of creation
        }
        else{
            directoryOfCreation = "smb://" + address.hostnameTxt.getText() + "/" + address.hostnameTxt1.getText() + "/";
        }
        compLoc = directoryOfCreation + "/" + compName;
        
        if(compName.isEmpty()){
            new WarningMessage().displayMessage("Challenge Name field cannot be empty.");
        }
        else if(directoryOfCreation.isEmpty()){
            new WarningMessage().displayMessage("Challenge Location field cannot be empty.");
        }
        else{
            try {
                new CreateComp().create(directoryOfCreation, compName, smb);
                new SuccessMessage().displayMessage(compName + " successfully created in " + directoryOfCreation);
            } catch (IOException ex) {
                new WarningMessage().displayMessage(directoryOfCreation + " either does not exist or is not writable.");
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_newOpsSubmitBActionPerformed

    private void deleteCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCompActionPerformed
        boolean yesOrNo = new DeleteWarning().displayMessage("Are you sure you want to delete: " + loadOpsInputTxt.getText());
        if(yesOrNo){
            
                DeleteComp delete = new DeleteComp();
                boolean result = false;
            try {
                result = delete.delete(loadOpsInputTxt.getText(), smb);
                System.out.println(result);
            } catch (IOException ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
                if(result)
                    new SuccessMessage().displayMessage(loadOpsInputTxt.getText() + " successfully deleted" );
                else
                    new WarningMessage().displayMessage(loadOpsInputTxt.getText() + " : No valid competition could be found at this location.");
        }
    }//GEN-LAST:event_deleteCompActionPerformed

    private void newOpsBrowseBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOpsBrowseBActionPerformed
        BrowseDirectory directory = new BrowseDirectory();
        newOpsInputTxt2.setText(directory.browse() + "/");
        smb = false;
    }//GEN-LAST:event_newOpsBrowseBActionPerformed

    private void loadOpsBrowseBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadOpsBrowseBActionPerformed
        BrowseDirectory directory = new BrowseDirectory();
        loadOpsInputTxt.setText(directory.browse() + "/");
        compLoc = loadOpsInputTxt.getText();
        smb = false;
    }//GEN-LAST:event_loadOpsBrowseBActionPerformed

    private void loadOpsSubmitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadOpsSubmitBActionPerformed
        try {
            //loadOpsInputTxt.setText(compLoc);
            if(smb){
                compLoc = "smb://" + address2.hostnameTxt.getText() + "/" + address2.hostnameTxt1.getText() + "/" + address2.hostnameTxt3.getText();
            }
            File file = new File(compLoc + "/Users.ctf");
            if(file.exists()){
                SuccessMessage success = new SuccessMessage();
                success.displayMessage("Successfully loaded competition at " + compLoc);
            }
            else if(new SmbFile(compLoc).exists()){
                SuccessMessage success = new SuccessMessage();
                success.displayMessage("Successfully loaded competition at " + compLoc);
            }
            else{
                new WarningMessage().displayMessage(loadOpsInputTxt.getText() + " : No valid competition could be found at this location.");
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SmbException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadOpsSubmitBActionPerformed

    private boolean isDigit(String string){
         boolean isDigit = true;
         String untestedValue = string;
           for(int i = 0; i < untestedValue.length(); i++){
               if(!Character.isDigit(untestedValue.charAt(i))){
                   isDigit = false;
               }
           }
           return isDigit;
    }
    private void chalOpsSubmitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chalOpsSubmitBActionPerformed
        String name = chalNameInputTxt.getText().trim();
        String flag = chalFlagInputTxt.getText().trim();
        String description = chalDescrpInputTxt.getText().trim();
        String valueS = chalValueInputTxt.getText().trim();
        
        int value = 0;
        if(isDigit(valueS)){
            value = Integer.parseInt(valueS);
            if(flag.isEmpty() || name.trim().isEmpty() || description.trim().isEmpty() || value < 0 || description.trim().isEmpty()){
                new WarningMessage().displayMessage("Invalid Entry, please fill all fields.");
            }
            else{//Start
                if(selection.equals("new")){
                    try {             
                        if(!new ReadChallenges().checkExists(name, compLoc, smb)){
                            try{
                                CreateChallenge challenge = new CreateChallenge(name, flag, description, value);
                                challenge.create(compLoc, smb);
                                new SuccessMessage().displayMessage(name + ": successfully created!");
                            }catch(IOException e){};

                        }
                        

                        else{
                            new WarningMessage().displayMessage("A challenge of this name already exists. Please try again with a different name.");
                        } 
                    } catch (IOException ex) {
                        Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    
                }
                if(selection.equals("edit")){
                    try {
                        UpdateChallenge challenge = new UpdateChallenge(editName);
                        if(!new ReadChallenges().checkExists(name, compLoc, smb)){
                            challenge.updateName(name, compLoc, smb);
                            challenge.updateDescription(description, compLoc, smb);
                            challenge.updateValue(value, compLoc, smb);
                            challenge.updateFlag(flag, compLoc, smb);
                            SuccessMessage message = new SuccessMessage();
                            message.displayMessage(editName + ": successfully updated name!");
                        }
                         else if(name.equals(editName)){
                            challenge.updateDescription(description, compLoc, smb);
                            challenge.updateValue(value, compLoc, smb);
                            challenge.updateFlag(flag, compLoc, smb);
                            SuccessMessage message = new SuccessMessage();
                            new SuccessMessage().displayMessage(editUser + " : successfully updated values.");
                        }
                        else{
                            new WarningMessage().displayMessage("A challenge of this name already exists. Please try again with a different name.");
                        }


                    } catch (IOException ex) {
                        Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);

                    }

                }
                
            }
        }
        else{
                new WarningMessage().displayMessage("Please enter a numeric number for \"value.\"");
                value = -1;
            }
    }//GEN-LAST:event_chalOpsSubmitBActionPerformed

    private void deleteChalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteChalActionPerformed
        boolean yesOrNo = new DeleteWarning().displayMessage("Are you sure you want to delete: " + editName.trim());
        if(yesOrNo){
            
                DeleteChallenge delete = new DeleteChallenge(editName.trim());
                System.out.println(chalNameInputTxt.getText());
                boolean result;
                result = delete.delete(compLoc, smb);
                System.out.println(result);
                if(result)
                    new SuccessMessage().displayMessage(editName + ": successfully deleted.");
                else
                    new WarningMessage().displayMessage(chalNameInputTxt.getText() + " :No valid challenge could be found at this location.");
        }
    }//GEN-LAST:event_deleteChalActionPerformed

    private void chalListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_chalListValueChanged
          try {
            String name = chalList.getSelectedValue().toString();
            editName = name;
            String flag = new ReadChallenges().GetFlag(chalList.getSelectedValue().toString(), compLoc, smb);
            String description = new ReadChallenges().GetDescription(chalList.getSelectedValue().toString(), compLoc, smb);
            String value = new ReadChallenges().GetValues(chalList.getSelectedValue().toString(), compLoc, smb);
            chalNameInputTxt.setText(name);
            chalFlagInputTxt.setText(flag);
            chalValueInputTxt.setText(value);
            chalDescrpInputTxt.setText(description);
        } catch (IOException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_chalListValueChanged

    private void searchChalResultsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_searchChalResultsListValueChanged
        try {
            String name = searchChalResultsList.getSelectedValue().toString();
            editName = name;
            String flag = new ReadChallenges().GetFlag(searchChalResultsList.getSelectedValue().toString(), compLoc, smb);
            String description = new ReadChallenges().GetDescription(searchChalResultsList.getSelectedValue().toString(), compLoc, smb);
            String value = new ReadChallenges().GetValues(searchChalResultsList.getSelectedValue().toString(), compLoc, smb);
            chalNameInputTxt.setText(name);
            chalFlagInputTxt.setText(flag);
            chalValueInputTxt.setText(value);
            chalDescrpInputTxt.setText(description);
        } catch (IOException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchChalResultsListValueChanged

    private void compOpsSubmitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compOpsSubmitBActionPerformed
        String name = compNameTxt.getText().trim();
        String valueS = compScoreTxt.getText().trim();
        if(isDigit(valueS)){
            if(name.trim().isEmpty() || valueS.trim().isEmpty()){
                new WarningMessage().displayMessage("Invalid Entry, please fill all fields.");
            }
            else{
                if(selection.equals("new")){
                    
                    CreateUser user = new CreateUser(name);
                    try {
                        
                        if(!new ReadUsers().checkExists(name, compLoc, smb) ){
                            user.create(valueS, compLoc, smb);
                            new SuccessMessage().displayMessage(name + " : successfully created.");
                        }
                        
                        else
                            new WarningMessage().displayMessage("A user of this name already exists. Please try again with a different name.");
                        
                    } catch (IOException ex) {
                        new WarningMessage().displayMessage("Failed to create user, please try again.");
                    }
                }
                
                if(selection.equals("edit")){
                    String oldName = editUser;
                    String newName = compNameTxt.getText().trim();
                    System.out.println("OLD NAME " + oldName);
                    System.out.print("NEW NAME: " + newName);
                    UpdateUser user = new UpdateUser(oldName, newName);
                    UpdateScore score = new UpdateScore(name, Integer.parseInt(valueS));
                    
                    try {
                        if(!new ReadUsers().checkExists(newName, compLoc, smb)){
                            score.updateReplace(compLoc, smb);
                            user.update(compLoc, smb);
                            new SuccessMessage().displayMessage(editUser + " : successfully updated username.");
                        }
                        
                        else if(name.equals(editUser)){
                            score.updateReplace(compLoc, smb);
                            new SuccessMessage().displayMessage(editUser + " : successfully updated score.");
                        }
                        else{
                            new WarningMessage().displayMessage(newName + " is the name of another user, try again.");
                        }
                        
                    } catch (IOException ex) {
                        new WarningMessage().displayMessage("Failed to create user, please try again.");
                    }   
                }
            }
        }
      

        else{
            new WarningMessage().displayMessage("Please enter a numeric number for \"score.\"");
        }

    }//GEN-LAST:event_compOpsSubmitBActionPerformed

    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userListValueChanged
        try {
                String name = userList.getSelectedValue().toString();
                editUser = name;
                String valueS = Integer.toString(new ReadUsers().GetScore(name, compLoc, smb));
                compNameTxt.setText(name);
                compScoreTxt.setText(valueS); 

        } catch (IOException ex ) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_userListValueChanged

    private void deleteUserBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserBActionPerformed
        boolean yesOrNo = new DeleteWarning().displayMessage("Are you sure you want to delete: " + editUser.trim());
        if(yesOrNo){
                DeleteUser delete = new DeleteUser(editUser.trim());
            try {
                delete.delete(compLoc, smb);
            } catch (IOException ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
                new SuccessMessage().displayMessage(editUser+ ": successfully deleted.");
        }
    }//GEN-LAST:event_deleteUserBActionPerformed

    private void searchUserBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserBActionPerformed
        searchUsersVisible = !searchUsersVisible;
        searchUsersP.setVisible(searchUsersVisible);
        searchUsersResultsSP.setVisible(searchUsersVisible);
    }//GEN-LAST:event_searchUserBActionPerformed

    private void loadOpsRemoteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadOpsRemoteBActionPerformed
        loadOpsInputTxt.setText("<Using Remote Address>");
        address2.setVisible(true);
        smb = true;
    }//GEN-LAST:event_loadOpsRemoteBActionPerformed

    private void newOpsRemoteB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOpsRemoteB1ActionPerformed
        loadOpsInputTxt.setText("<Using Remote Address>");
        address.setVisible(true);
        smb = true;
    }//GEN-LAST:event_newOpsRemoteB1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainPanel;
    private javax.swing.JTextField chalDescrpInputTxt;
    private javax.swing.JTextField chalFlagInputTxt;
    private javax.swing.JLabel chalInstructionsL;
    private javax.swing.JList chalList;
    private javax.swing.JScrollPane chalListSP;
    private javax.swing.JTextField chalNameInputTxt;
    private javax.swing.JPanel chalOpsP;
    private javax.swing.JButton chalOpsSubmitB;
    private javax.swing.JTextField chalValueInputTxt;
    private javax.swing.JLabel challengeDescrpL;
    private javax.swing.JLabel challengeFlagL;
    private javax.swing.JLabel challengeNameL;
    private javax.swing.JPanel challengeTab;
    private javax.swing.JLabel challengeValue;
    private javax.swing.JLabel compInstructionsL;
    private javax.swing.JLabel compNameLabel;
    private javax.swing.JTextField compNameTxt;
    private javax.swing.JPanel compOpsP;
    private javax.swing.JButton compOpsSubmitB;
    private javax.swing.JLabel compScoreL;
    private javax.swing.JTextField compScoreTxt;
    private javax.swing.JPanel compTab;
    private javax.swing.JLabel competitorInstructions;
    private javax.swing.JLabel competitorInstructions1;
    private javax.swing.JPanel competitorsTab;
    private javax.swing.JLabel currentChallengesL;
    private javax.swing.JLabel currentUsersL;
    private javax.swing.JButton deleteChal;
    private javax.swing.JButton deleteComp;
    private javax.swing.JButton deleteUserB;
    private javax.swing.JButton eChalB;
    private javax.swing.JButton eCompB;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lCmpB;
    private javax.swing.JLabel loadInstructionsL;
    private javax.swing.JButton loadOpsBrowseB;
    private javax.swing.JTextField loadOpsInputTxt;
    private javax.swing.JPanel loadOpsP;
    private javax.swing.JButton loadOpsSubmitB;
    private javax.swing.JPanel modChalListP;
    private javax.swing.JPanel modUserListP;
    private javax.swing.JButton nChalB;
    private javax.swing.JButton nCmpB;
    private javax.swing.JButton nCompB;
    private javax.swing.JLabel newInstructionsL;
    private javax.swing.JButton newOpsBrowseB;
    private javax.swing.JTextField newOpsInputTxt;
    private javax.swing.JTextField newOpsInputTxt2;
    private javax.swing.JPanel newOpsP;
    private javax.swing.JButton newOpsRemoteB;
    private javax.swing.JButton newOpsRemoteB1;
    private javax.swing.JButton newOpsSubmitB;
    private javax.swing.JScrollPane scoreSP;
    private javax.swing.JPanel scoreTab;
    private javax.swing.JList scoreTableList;
    private javax.swing.JTabbedPane scoreTableTab;
    private javax.swing.JButton searchChalB;
    private javax.swing.JTextField searchChalInputTxt;
    private javax.swing.JPanel searchChalP;
    private javax.swing.JList searchChalResultsList;
    private javax.swing.JScrollPane searchChalResultsSP;
    private javax.swing.JButton searchChalSubmitB;
    private javax.swing.JButton searchUserB;
    private javax.swing.JTextField searchUserInputTxt;
    private javax.swing.JButton searchUserSubmitB;
    private javax.swing.JPanel searchUsersP;
    private javax.swing.JList searchUsersResultsList;
    private javax.swing.JScrollPane searchUsersResultsSP;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables
}
